[uwsgi]

# ref https://www.techatbloomberg.com/blog/configuring-uwsgi-production-deployment/
# official https://uwsgi-docs.readthedocs.io/en/latest/index.html
chdir = /code
module = mysite.wsgi:application
strict = true                   ; fail to start if any parametere is wrong 
master = true                   ; run mater-process to manage other workers
enable-threads = true           ; enable Python multi-threading to speed up
vacuum = true                   ; Delete sockets during shutdown
single-interpreter = true       ; one service per worker for more stability
die-on-term = true              ; Shutdown when receiving SIGTERM
need-app = true                 ; prevents from starting if it is unable to load your app

# Logging
disable-logging = true
log-5xx = true

# Worker Recycling
max-requests = 1000             ; Restart workers after this many requests
max-worker-lifetime = 3600      ; Restart workers after this many seconds
reload-on-rss = 2048            ; Restart workers after this much resident memory
worker-reload-mercy = 60        ; How long to wait before forcefully killing workers

py-call-osafterfork = true      ; Allowing workers to receive OS signals
harakiri = 60                   ; Forcefully kill workers after 60 seconds


# Dynamic Worker Scaling
# Max Number of workers = number of CPUs x 2 i.e. 2 workers per CPU
cheaper-algo = busyness              
processes = 16                       ; Maximum number of workers allowed
cheaper = 4                          ; Minimum number of workers allowed
cheaper-initial = 8                  ; Workers created at startup - Number of CPUs x 2 + 1
cheaper-overload = 1                 ; Length of a cycle in seconds
cheaper-step = 8                     ; How many workers to spawn at a time

cheaper-busyness-multiplier = 30     ; How many cycles to wait before killing workers
cheaper-busyness-min = 20            ; Below this threshold, kill workers (if stable for multiplier cycles)
cheaper-busyness-max = 70            ; Above this threshold, spawn new workers
cheaper-busyness-backlog-alert = 16  ; Spawn emergency workers if more than this many requests are waiting in the queue
cheaper-busyness-backlog-step = 2    ; How many emergegency workers to create if there are too many requests in the queue


# Socket with appropriate permissions (stored in the shared docker folder
# for data exchange between django and nginx)
socket = /root/socket/app.sock
chmod-socket=664